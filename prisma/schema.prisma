// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model User {
  id              String          @id @default(cuid())
  username        String          @unique
  email           String          @unique
  password        String
  leagues         League[]
  user_bets       UserLeagueBet[]
  receivedInvites Invitation[]    @relation(name: "received") //incoming and outcoming
  sentInvites     Invitation[]    @relation(name: "sent")
  createdAt       DateTime        @default(now())
}

model League {
  id               String          @id @default(cuid())
  league_name      String
  users            User[]
  user_bets        UserLeagueBet[]
  Invitations      Invitation[]
  scoring_type     String
  number_bets      Int
  number_periods   Int
  period_type      String
  is_private       Boolean
  max_number_users Int
  max_odds         Int
  min_odds         Int
  allow_ml         Boolean
  allow_spread     Boolean
  allow_total      Boolean
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime        @default(now())
}

model UserLeagueBet {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userID], references: [id],onDelete: Cascade)
  userID     String
  league     League   @relation(fields: [leagueID], references: [id],onDelete: Cascade)
  leagueID   String
  event     Event?   @relation(fields: [eventID], references: [id],onDelete: Cascade)
  eventID   String
  team_name  String?
  Opponent   String?
  bet_type   String
  price      Int
  point      Float?
  result     Float
  createdAt  DateTime @default(now())
  start_date DateTime
  status     Int?   //0 means no result 1 means calculated
}

model Event {
  id              String   @id @default(cuid())
  gameID          String  @unique
  sportTitle      String
  sportKey        String
  homeTeam        String
  awayTeam        String
  lastUpdate      DateTime @default(now())
  awayML          Int?
  homeML          Int?
  awaySpreadPoint Float?
  homeSpreadPoint Float?
  awaySpreadPrice Int?
  homeSpreadPrice Int?
  totalPoint      Float?
  overPrice       Int?
  underPrice      Int?
  startDate       DateTime
  homeScore       Int?
  awayScore       Int?
  status          Int      @default(0) //0 not started 1 in progress 2 complete
  userleaguebets UserLeagueBet[]
}

// Define the UserLeagues junction table

model Invitation {
  id          String   @id @default(cuid())
  league      League   @relation(fields: [league_id], references: [id],onDelete: Cascade)
  league_id   String
  sender      User     @relation(name: "sent", fields: [sender_id], references: [id],onDelete: Cascade)
  sender_id   String
  receiver    User     @relation(name: "received", fields: [receiver_id], references: [id],onDelete: Cascade)
  receiver_id String
  timeSent    DateTime @default(now())
  accepted    Boolean
  status      Int?     @default(0)
}
